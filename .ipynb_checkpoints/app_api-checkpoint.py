{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bc8d14c-6fbf-4989-88a3-a2b019cfc557",
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Реализуем API с тремя эндпоинтами:\n",
    "\n",
    "1. POST /predict —\n",
    "Для получения предсказания от модели на основе входных данных\n",
    "\n",
    "2. GET /stats —\n",
    "Для получения статистики использования API\n",
    "\n",
    "3. GET /health —\n",
    "Для проверки работоспособности API\n",
    "\n",
    "Шаг 1: Установка необходимых библиотек\n",
    "pip install fastapi uvicorn pydantic scikit-learn pandas numpy catboost\n",
    "\n",
    "Шаг 2: Создание app_api.py\n",
    "Шаг 3: Запуск приложения: python app_api.py\n",
    "Шаг 4: Тестирование API\n",
    "\n",
    "Тест API с помощью curl:\n",
    "\n",
    "curl -X GET http://127.0.0.1:8000/health\n",
    "curl -X GET http://127.0.0.1:8000/stats\n",
    "curl -X POST http://127.0.0.1:8000/predict \\\n",
    "-H \"Content-Type: application/json\" \\\n",
    "-d '{\n",
    "  \"text\": \"Фу, жесть, такая высокая стоимость\"\n",
    "}'\n",
    "\n",
    "'''\n",
    "\n",
    "from fastapi import FastAPI\n",
    "from pydantic import BaseModel\n",
    "import pickle\n",
    "import pandas as pd\n",
    "\n",
    "app = FastAPI()\n",
    "\n",
    "# Загружаем отдельно TF-IDF и классификатор\n",
    "with open(\"best_model_tfidf.pkl\", \"rb\") as f:\n",
    "    tfidf = pickle.load(f)\n",
    "\n",
    "with open(\"best_model_clf.pkl\", \"rb\") as f:\n",
    "    clf = pickle.load(f)\n",
    "\n",
    "# Счетчик запросов\n",
    "request_count = 0\n",
    "\n",
    "# Модель для валидации входных данных\n",
    "class PredictionInput(BaseModel):\n",
    "    text: list[str]  # список текстов для предсказания\n",
    "\n",
    "@app.get(\"/stats\")\n",
    "def stats():\n",
    "    return {\"request_count\": request_count}\n",
    "\n",
    "@app.get(\"/health\")\n",
    "def health():\n",
    "    return {\"status\": \"OK\"}\n",
    "\n",
    "@app.post(\"/predict_model\")\n",
    "def predict_model(input_data: PredictionInput):\n",
    "    global request_count\n",
    "    request_count += 1\n",
    "\n",
    "    # Создаем DataFrame из списка текстов\n",
    "    new_data = pd.DataFrame({'text': input_data.text})\n",
    "\n",
    "    # Векторизация и предсказание\n",
    "    X_vect = tfidf.transform(new_data['text'])\n",
    "    predictions = clf.predict(X_vect)\n",
    "\n",
    "    # Возвращаем список предсказаний\n",
    "    return {\"predictions\": predictions.tolist()}\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    import uvicorn\n",
    "    uvicorn.run(app, host=\"127.0.0.1\", port=8000, reload=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
